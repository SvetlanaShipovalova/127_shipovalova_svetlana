DoubleLinkedList | 11 | return dummy == dummy; -> return size == 0; | pushFront_ToEmptyList_False +++
DynamicArray| 11 | size = 1;-> size = DefaultSize;| createArray_DefaultSize +++
Node| 13 | this.next = prev;-> this.next = next;| PushFrontThreeItems +++
Node| 14 | this.prev = next;-> this.prev = prev;| PushFrontThreeItems +++
DynamicArray| 15 | data = new Object[capacity];-> data = new Object[size];| SetThreeValues_Correct +++
DoubleLinkedList | 17 | return dummy.getPrev(); -> return dummy.getNext();| pushFrontThreeItems_H +++
DoubleLinkedList | 20 | return dummy.getNext();-> return dummy.getPrev();| pushItems_TailEnd +++
DynamicArray| 21 | if(newSize > 0) -> if(newSize < 0)  | resize_Array_NewSize +++
DoubleLinkedList | 24 | if(index < 0 || index > size)-> if(index < 0 || index >= size)| pushFront_ToEmptyList_Error +++
DynamicArray| 27 | newSize = size; -> size = newSize;| resize_ResizeArray_NewSizeIsCorrect
DoubleLinkedList | 28 | cur = cur.getPrev();-> cur = cur.getNext(); | PushFrontThreeItems +++
DynamicArray| 30 | if(index < 0 || index > size)  -> if(index < 0 || index >= size) | createArray_toGetValue +++
DoubleLinkedList | 33 | --size; -> ++size; | PushFrontThreeItems +++
DynamicArray| 35 | if(index < 0 || index > size)  -> if(index < 0 || index >= size) | createArray_toSetValue +++
DynamicArray| 40 | if(index < 0 || index > size)  -> if(index < 0 || index >= size) | insert_toInsertValue +++
DoubleLinkedList | 41 | return insertBefore(getTail(), data);-> return insertAfter(getTail(), data);| PushFrontThreeItems +++
DynamicArray| 42 | (capacity < size) {  -> if(capacity <= size) {  | insert_InsertValues +++
DoubleLinkedList | 44 | return insertBefore(getTail(), data);-> return insertBefore(getHead(), data); | public void pushBack_SecondItem +++
DoubleLinkedList | 47 | node.getPrev().setPrev(node.getNext()); -> node.getPrev().setNext(node.getNext()); | removeFirstItem +++
DoubleLinkedList | 48 | node.getNext().setNext(node.getPrev()); -> node.getNext().setPrev(node.getPrev()); | removeFirstItem +++
DynamicArray| 49 | data[size] = value; -> data[index] = value; | insert_InsertValues_ +++
DynamicArray| 52 | if(capacity < size) { -> if(capacity <= size) {| pushBack_CorrectValues +++
DoubleLinkedList | 55 | list.getHead().setNext(node); -> list.getHead().setPrev(node);| insertList_AfterFirstItem +++
DoubleLinkedList | 56 | list.getTail().setPrev(node.getNext()); -> list.getTail().setNext(node.getNext()); | insertList_AfterFirstItem +++
DynamicArray| 56 | data[capacity] = value;  -> data[size] = value;| pushBack_CorrectValues +++
DynamicArray| 60 | if(size < 0) -> if(size <= 0)  | popBackFromEmptyArray_Unsupported +++
DoubleLinkedList | 63 |  -> size += list.getSize(); | insertListAfter_FirstItem_Size +++
DynamicArray| 66 | if(index < 0 || index > size)  -> if(index < 0 || index >= size) | removeIndexOutOfBounds +++
DoubleLinkedList | 68 | list.getHead().setNext(node.getPrev()); -> list.getHead().setPrev(node.getPrev()); | insertList_BeforeFirstItem +++
DoubleLinkedList | 69 | list.getTail().setPrev(node);-> list.getTail().setNext(node); | insertList_BeforeFirstItem +++
DoubleLinkedList | 76 |  -> size += list.getSize(); | insertListBefore_FirstItem_Size +++