QuickSort | 12 | int base = split(data, e, b); -> int base = split(data, b, e);   | quickSort_UnsortedArrayWithLengthTwo_GetSortedArray # Если не исправить эту ошибку, то большая часть кода просто не выполняется, не проходится if в qSortRec, и while не начинается в split, следовательно нет шансов выявить ошибки. Но как только мы исправляем ошибку в этой строчке, то вылезают остальные ошибки, и большая часть из них приводит к выходу за границы массива, поэтому раздельно их исправить нельзя.
QuickSort | 13 | qSortRec(data, b, base - 2);  -> qSortRec(data, b, base - 1);    | quickSort_UnsortedArrayWithLengthTwo_GetSortedArray
QuickSort | 14 | qSortRec(data, base + 2, e);  -> qSortRec(data, base + 1, e);    | quickSort_UnsortedArrayWithLengthTwo_GetSortedArray
QuickSort | 24 | swap(data, left, baseElem);   -> swap(data, left - 1, baseElem); | quickSort_UnsortedArrayWithLengthTwo_GetSortedArray
QuickSort | 25 | baseElem = left;              -> baseElem = left - 1;            | quickSort_UnsortedArrayWithTwoZeroAndLengthFour_GetSortedArray
QuickSort | 29 | swap(data, left+1, right);    -> swap(data, left, right);        | quickSort_UnsortedArray_GetSortedArray

MergeSort | 19 | merge(buffer, sorting, begin, middle - begin, end - middle);          -> merge(buffer, sorting, begin, middle - begin + 1, end - middle);      | mergeSort_UnsortedArrayWithLengthTwo_GetSortedArray # Эта ошибка затрагивает сортировку любых данных,
MergeSort | 35 | else if (comparator.compare(from[firstFocus], from[secondFocus]) > 0) -> else if (comparator.compare(from[firstFocus], from[secondFocus]) < 0) | mergeSort_UnsortedArrayWithLengthTwo_GetSortedArray # как и эта, поэтому они исправляются в первую очередь и одновременно
MergeSort | 17 | mergeSortRec(sorting, buffer, begin, middle);                         -> mergeSortRec(buffer, sorting, begin, middle);                         | mergeSort_UnsortedOnlyFirstTwoElements_GetSortedArray
MergeSort | 18 | mergeSortRec(sorting, buffer, middle + 1, end);                       -> mergeSortRec(buffer, sorting, middle + 1, end);                       | mergeSort_UnsortedArrayV1_GetSortedArray
MergeSort | 34 | to[resPos++] = from[firstFocus];                                      -> to[resPos++] = from[firstFocus++];                                    | mergeSort_UnsortedArrayV2_GetSortedArray
MergeSort | 32 | to[resPos] = from[secondFocus++];                                     -> to[resPos++] = from[secondFocus++];                                   | mergeSort_UnsortedArrayV3_GetSortedArray

HeapSort | 10 | swap(0, data.length - sortedSize);                          -> swap(0, data.length - sortedSize - 1);               | heapSort_ArrayContainsOnlyTwoNumbersOne_GetUnchangedArray
HeapSort | 17 | for (int i = start; i >= 1; --i)                            -> for (int i = start; i >= 0; --i)                     | heapSort_SortedArrayLengthTwo_GetUnchangedArray
HeapSort | 18 | siftDown(i, 2 * i, 2 * i + 1, data.length);                 -> siftDown(i, 2 * i + 1, 2 * i + 2, data.length);      | heapSort_SortedArrayLengthThree_GetUnchangedArray
HeapSort | 38 | siftDown(right, 2 * right + 1, 2 * right + 2, data.length); -> siftDown(right, 2 * right + 1, 2 * right + 2, size); | heapSort_UnsortedArrayV1_GetUnchangedArray
HeapSort | 34 | siftDown(left, 2 * left, 2 * left + 1, size);               -> siftDown(left, 2 * left + 1, 2 * left + 2, size);    | heapSort_UnsortedArrayV2_GetUnchangedArray

